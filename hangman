# Hangman Game
# -----------------------------------
# Helper code
# You don't need to understand this helper code,
# but you will have to know how to use the functions
# (so be sure to read the docstrings!)
import random
import string 

WORDLIST_FILENAME = "words.txt"


def load_words():
    """
    Returns a list of valid words. Words are strings of lowercase letters.
    
    Depending on the size of the word list, this function may
    take a while to finish.
    """
    print("Loading word list from file...")
    # inFile: file
    inFile = open(WORDLIST_FILENAME, 'r')
    # line: string
    line = inFile.readline()
    # wordlist: list of strings
    wordlist = line.split()
    print("  ", len(wordlist), "words loaded.")
    return wordlist



def choose_word(wordlist):
    """
    wordlist (list): list of words (strings)
    
    Returns a word from wordlist at random
    """
    return random.choice(wordlist)

# end of helper code

# -----------------------------------

# Load the list of words into the variable wordlist
# so that it can be accessed from anywhere in the program
wordlist = load_words()


def is_word_guessed(secret_word, letters_guessed):
    '''
    secret_word: string, the word the user is guessing; assumes all letters are
      lowercase
    letters_guessed: list (of letters), which letters have been guessed so far;
      assumes that all letters are lowercase
    returns: boolean, True if all the letters of secret_word are in letters_guessed;
      False otherwise
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
#    pass  
    current_word = ''
    for letter in secret_word:
        if letter in letters_guessed:
            current_word += letter
            if current_word == secret_word:
                print('You guessed the word!')
                return True
        else:
            return False

def get_guessed_word(secret_word, letters_guessed):
    '''
    secret_word: string, the word the user is guessing
    letters_guessed: list (of letters), which letters have been guessed so far
    returns: string, comprised of letters, underscores (_), and spaces that represents
      which letters in secret_word have been guessed so far.
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
#    pass
    status = ''
    for letter in secret_word:
        if letter in letters_guessed:
            status += letter
        else:
            status += '_ '
    return status

def get_available_letters(letters_guessed):
    '''
    letters_guessed: list (of letters), which letters have been guessed so far
    returns: string (of letters), comprised of letters that represents which letters have not
      yet been guessed.
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
#    pass
    letters_left = ''
    for letter in string.ascii_lowercase:
        if letter not in letters_guessed:
            letters_left += letter
    return letters_left

def check_guess(guess, secret_word):
    '''
    guess: a letter that the user guessed
    secret_word: the word the user is guessing
    returns: boolean, True if the letter is in the word, False if the letter is not
    '''
#    pass    
    if guess in secret_word:
        return True
    else:
        return False
    

def hangman(secret_word):
    '''
    secret_word: string, the secret word to guess.
    
    Starts up an interactive game of Hangman.
    
    * At the start of the game, let the user know how many 
      letters the secret_word contains and how many guesses s/he starts with.
      
    * The user should start with 6 guesses

    * Before each round, you should display to the user how many guesses
      s/he has left and the letters that the user has not yet guessed.
    
    * Ask the user to supply one guess per round. Remember to make
      sure that the user puts in a letter!
    
    * The user should receive feedback immediately after each guess 
      about whether their guess appears in the computer's word.

    * After each guess, you should display to the user the 
      partially guessed word so far.
    
    Follows the other limitations detailed in the problem write-up.
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
#    pass
    lives = 6
    letters_guessed = ''

    print('Welcome to the Game of Hangman!')
    print('I am thinking of a word that is', len(secret_word), 'letters long.')
#    print(len(secret_word) * '_ ')
    
    while is_word_guessed(secret_word, letters_guessed) is False and lives > 0:
        print('- - - - - - - - -')
        print('You have', lives, 'guesses left.')
        print('Available Letters: ', get_available_letters(letters_guessed))
        guess = input('Guess a letter or word: ').lower()
        
        if guess in letters_guessed:
            print('You have guessed this letter before: ', get_guessed_word(secret_word, letters_guessed))
        elif guess not in string.ascii_lowercase:
            print('Oops, that is not a letter:', get_guessed_word(secret_word, letters_guessed))
        elif check_guess(guess, secret_word):
            if guess not in letters_guessed:
                letters_guessed += guess
            print('Good guess: ', get_guessed_word(secret_word, letters_guessed))
        else:
            print('Oops, that letter is not in the word:', get_guessed_word(secret_word, letters_guessed))
            if guess not in letters_guessed:
                letters_guessed += guess
            lives -= 1
            
        if is_word_guessed(secret_word, letters_guessed) == True:
            print('Congrats! You guessed the word correctly and win!')
            return
        elif lives == 0:
            print('Sorry, you ran out of tries.')
    

if __name__ == "__main__":
    # pass

    # To test part 2, comment out the pass line above and
    # uncomment the following two lines.
    
    secret_word = choose_word(wordlist)
    hangman(secret_word)
